:root {
  --fontface_primary: Roboto;
  --font_base: 16px;
  --line_height: 1.5em;

  --color_main: #819cff;
  --color_secondary: #efeaf5;
  --color_accent: #6e8aef;
  --color_text: #7c7c7c;

  --transition_base: 0.35s;
  --transition_short: 0.15s;
  --transition_long: 0.55s;
}

// hide scrollbar
// html {
//   overflow: scroll;
//   overflow-x: hidden;
// }
// ::-webkit-scrollbar {
//   width: 0px; /* Remove scrollbar space */
//   background: transparent; /* Optional: just make scrollbar invisible */
// }
// /* Optional: show position indicator in red */
// ::-webkit-scrollbar-thumb {
//   background: #ff0000;
// }
body {
  background-color: var(--color_secondary);
  color: var(--color_text);
  line-height: 1.5;
}

body,
button,
a,
input {
  font-family: var(--fontface_primary);
  font-size: var(--font_base);
}

button,
a {
  cursor: pointer;
}

html {
  font-family: var(--fontface_primary);
  line-height: var(--line_height);
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: border-box;
  margin: 0;
  user-select: none;
}

*:focus {
  outline: none;
}

h1 {
  font-weight: bold;
  font-size: 2.8rem;
  margin-bottom: 30px;
}

//Page transition
.page-enter-active, .page-leave-active {
  transition: opacity var(--transition_base);
}

.page-enter, .page-leave-active {
  opacity: 0;
}

.bounce-enter-active {
  animation: opacity-in var(--transition_base);
}

.bounce-leave-active {
  animation: opacity-out var(--transition_base);
}

@keyframes opacity-in {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

@keyframes opacity-out {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}


//Media queries

$breakpoints: (
  small: (min-width: 576px),
  medium: (min-width: 768px),
  large: (min-width: 992px),
  extra-large:(min-width: 1200px)
);

/// Управление отзывчивостью.
/// @access public
/// @param {String} $breakpoint - точка останова
/// @requires $breakpoints
@mixin respond-to($breakpoint) {
  $raw-query: map-get($breakpoints, $breakpoint);

  @if $raw-query {
    $query: if(
        type-of($raw-query) == 'string',
        unquote($raw-query),
        inspect($raw-query)
    );

    @media #{$query} {
      @content;
    }
  } @else {
    @error 'Не указано значение для `#{$breakpoint}`. '
       + 'Пожалуйста, убедитесь, что точка останова объявлена в карте `$breakpoints`.';
  }
}

//using
//.foo {
//  color: red;
//
//  @include respond-to('medium') {
//    color: blue;
//  }
//}
